{"version":3,"sources":["theme/themeSlice.ts","theme/components/ThemeSwitch.tsx","chat/chatSlice.ts","chat/components/ChatHistory.tsx","chat/containers/ChatHistory.tsx","chat/components/ChatInput.tsx","chat/containers/ChatInput.tsx","chat/components/ChatErrors.tsx","chat/containers/ChatErrors.tsx","store/index.ts","theme/containers/ThemeSwitch.tsx","theme/themes.ts","app/components/App.tsx","app/containers/App.tsx","index.tsx"],"names":["themeSlice","createSlice","name","initialState","reducers","toggleTheme","state","themeReducer","reducer","actions","useStyles","makeStyles","root","display","gridTemplateColumns","justifyContent","alignItems","icon","margin","ThemeSwitch","theme","onToggleTheme","classes","className","Switch","checked","onChange","color","chatSlice","messages","timestamp","text","errors","addChatMessage","action","concat","payload","Date","now","deleteChatMessage","filter","m","addChatError","error","dismissChatErrors","chatReducer","messageCard","marginTop","spacing","marginBottom","messageCardContent","paddingBottom","ChatHistory","onDeleteMessage","map","message","Card","CardContent","Typography","IconButton","onClick","useAppSelector","s","chat","sort","m1","m2","dispatch","useAppDispatch","gridColumnGap","buttons","marginLeft","ChatInput","onAddMessage","onFetchAsyncMessage","onDemoError","useState","setMessage","TextField","value","label","variant","e","target","onKeyPress","key","trim","length","Tooltip","title","Button","serviceUrl","a","fetch","then","response","ok","Error","catch","snackbarContent","palette","common","white","backgroundColor","dark","closeIcon","ChatErrors","onDismissErrors","openSnackbar","setOpenSnackbar","useEffect","Snackbar","open","ClickAwayListenerProps","onClickAway","SnackbarContent","combineReducers","store","configureStore","useDispatch","selector","useSelector","lightTheme","createTheme","type","darkTheme","toolbar","justifyItems","main","height","width","gridTemplateRows","gridRowGap","paddingTop","paddingLeft","paddingRight","App","AppBar","Toolbar","process","ThemeProvider","CssBaseline","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c734151.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport type AppTheme = 'light' | 'dark'\n\nconst themeSlice = createSlice({\n  name: 'theme',\n  initialState: 'light' as AppTheme,\n  reducers: {\n    toggleTheme: (state) => {\n      return state === 'light' ? 'dark' : 'light'\n    },\n  },\n})\n\nexport const themeReducer = themeSlice.reducer\nexport const { toggleTheme } = themeSlice.actions\n","import DarkThemeIcon from '@material-ui/icons/Brightness2'\nimport LightThemeIcon from '@material-ui/icons/WbSunny'\nimport * as React from 'react'\nimport { Switch } from '@material-ui/core'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport { AppTheme } from '../themeSlice'\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto auto',\n    justifyContent: 'start',\n    alignItems: 'center',\n  },\n  icon: {\n    margin: 4,\n  },\n})\n\nexport interface Props {\n  readonly theme: AppTheme\n  readonly onToggleTheme: () => void\n}\n\nexport const ThemeSwitch = ({ theme, onToggleTheme }: Props) => {\n  const classes = useStyles(theme)\n  return (\n    <div className={classes.root}>\n      <LightThemeIcon className={classes.icon} />\n      <Switch checked={theme === 'dark'} onChange={onToggleTheme} color={'default'} />\n      <DarkThemeIcon className={classes.icon} />\n    </div>\n  )\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppDispatch } from '../store'\n\nexport interface ChatState {\n  readonly messages: ReadonlyArray<ChatMessage>\n  readonly errors: ReadonlyArray<ChatError>\n}\n\nexport interface ChatMessage {\n  readonly timestamp: number\n  readonly text: string\n}\n\nexport interface ChatError {\n  readonly error: string\n}\n\nconst initialState: ChatState = {\n  messages: [\n    {\n      timestamp: 1568011059155,\n      text: 'This pretends to be a chat, but is just a list of one line messages 🤷🏼‍♀️',\n    },\n    {\n      timestamp: 1568011059165,\n      text: 'Hey there!',\n    },\n  ],\n  errors: [],\n}\n\ninterface AddMessagePayload {\n  readonly text: string\n  readonly timestamp?: number\n}\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    addChatMessage: (state: ChatState, action: PayloadAction<AddMessagePayload>) => ({\n      ...state,\n      messages: state.messages.concat({\n        text: action.payload.text,\n        timestamp: action.payload.timestamp ?? Date.now(),\n      }),\n    }),\n    deleteChatMessage: (state: ChatState, action: PayloadAction<number>) => ({\n      ...state,\n      messages: state.messages.filter((m) => m.timestamp !== action.payload),\n    }),\n    addChatError: (state: ChatState, action: PayloadAction<string>) => ({\n      ...state,\n      errors: state.errors.concat({\n        error: action.payload,\n      }),\n    }),\n    dismissChatErrors: (state: ChatState) => ({\n      ...state,\n      errors: [],\n    }),\n  },\n})\n\nexport const { addChatMessage, deleteChatMessage, addChatError, dismissChatErrors } = chatSlice.actions\n\nexport const chatReducer = chatSlice.reducer\n\nexport const fetchChatMessage = (serviceUrl: string) => async (dispatch: AppDispatch) => {\n  return fetch(serviceUrl)\n    .then((response) => {\n      if (response.ok) {\n        return response.text()\n      }\n      throw new Error('Network response not ok.')\n    })\n    .then((text) => dispatch(addChatMessage({ text })))\n    .catch((error) => dispatch(addChatError(error.message)))\n}\n","import { Card, Theme } from '@material-ui/core'\nimport React from 'react'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport IconButton from '@material-ui/core/IconButton'\nimport { ChatMessage } from '../chatSlice'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  messageCard: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  messageCardContent: {\n    display: 'grid',\n    gridTemplateColumns: '1fr auto',\n    '&:last-child': {\n      // override material-ui default\n      paddingBottom: theme.spacing(2),\n    },\n  },\n}))\n\nexport interface Props {\n  readonly messages: ReadonlyArray<ChatMessage>\n  readonly onDeleteMessage: (timestamp: number) => void\n}\n\nexport const ChatHistory = ({ messages, onDeleteMessage }: Props) => {\n  const classes = useStyles()\n  const onDeleteButtonClick = (timestamp: number) => () => onDeleteMessage(timestamp)\n  return (\n    <div>\n      {messages.map((message) => (\n        <Card key={message.timestamp} className={classes.messageCard}>\n          <CardContent className={classes.messageCardContent}>\n            <Typography>{message.text}</Typography>\n            <IconButton aria-label=\"delete\" onClick={onDeleteButtonClick(message.timestamp)}>\n              <DeleteIcon />\n            </IconButton>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","import { ChatHistory as ChatHistoryComponent } from '../components/ChatHistory'\nimport * as React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../store'\nimport { deleteChatMessage } from '../chatSlice'\n\nexport const ChatHistory = () => {\n  const messages = useAppSelector((s) => [...s.chat.messages].sort((m1, m2) => m2.timestamp - m1.timestamp))\n\n  const dispatch = useAppDispatch()\n  const onDeleteMessage = (timestamp: number) => dispatch(deleteChatMessage(timestamp))\n\n  return <ChatHistoryComponent messages={messages} onDeleteMessage={onDeleteMessage} />\n}\n","import { TextField, Theme } from '@material-ui/core'\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: '50% auto',\n    gridColumnGap: theme.spacing(1),\n    alignItems: 'center',\n  },\n  buttons: {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto',\n    gridColumnGap: theme.spacing(1),\n    justifyContent: 'right',\n    alignItems: 'center',\n  },\n  icon: {\n    marginLeft: theme.spacing(1),\n  },\n}))\n\nexport interface Props {\n  readonly onAddMessage: (text: string) => void\n  readonly onFetchAsyncMessage: () => void\n  readonly onDemoError: () => void\n}\n\nexport const ChatInput = ({ onAddMessage, onFetchAsyncMessage, onDemoError }: Props) => {\n  const classes = useStyles()\n  const [message, setMessage] = useState<string>('')\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setMessage(e.target.value)\n  const onKeyPress = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && message.trim().length !== 0) {\n      onAddMessage(message)\n      setMessage('')\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        value={message}\n        label=\"Compose Message\"\n        variant=\"outlined\"\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n      />\n      <div className={classes.buttons}>\n        <Tooltip title={'Fetch Async Message'}>\n          <Button color=\"primary\" variant=\"outlined\" onClick={onFetchAsyncMessage}>\n            Async\n            <CloudDownloadIcon className={classes.icon} />\n          </Button>\n        </Tooltip>\n        <Tooltip title={'Demo Error Handling'}>\n          <Button color=\"secondary\" variant=\"outlined\" onClick={onDemoError}>\n            Error\n            <ErrorIcon className={classes.icon} />\n          </Button>\n        </Tooltip>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { ChatInput as ChatInputComponent } from '../components/ChatInput'\nimport { useAppDispatch } from '../../store'\nimport { addChatError, addChatMessage, fetchChatMessage } from '../chatSlice'\n\nconst demoUrl = 'message.txt' // resides in `public` folder\nconst errorMessage = 'A demo error'\n\nexport const ChatInput = () => {\n  const dispatch = useAppDispatch()\n  const onAddMessage = (text: string) => dispatch(addChatMessage({ text }))\n  const onFetchAsyncMessage = () => dispatch(fetchChatMessage(demoUrl))\n  const onDemoError = () => dispatch(addChatError(errorMessage))\n  return (\n    <ChatInputComponent\n      onAddMessage={onAddMessage}\n      onFetchAsyncMessage={onFetchAsyncMessage}\n      onDemoError={onDemoError}\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Snackbar, Theme } from '@material-ui/core'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport { ChatError } from '../chatSlice'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  snackbarContent: {\n    color: theme.palette.common.white,\n    backgroundColor: theme.palette.error.dark,\n  },\n  closeIcon: {\n    color: theme.palette.common.white,\n  },\n}))\n\nexport interface Props {\n  readonly errors: ReadonlyArray<ChatError>\n  readonly onDismissErrors: () => void\n}\n\nexport const ChatErrors = ({ errors, onDismissErrors }: Props) => {\n  const classes = useStyles()\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false)\n\n  useEffect(() => setOpenSnackbar(errors.length > 0), [errors.length])\n\n  const preventClickAway = { onClickAway: () => null }\n\n  return (\n    <Snackbar open={openSnackbar} ClickAwayListenerProps={preventClickAway}>\n      <SnackbarContent\n        className={classes.snackbarContent}\n        message={`${errors.length} error(s) – check Console...`}\n        action={[\n          <IconButton className={classes.closeIcon} key=\"close\" aria-label=\"close\" onClick={onDismissErrors}>\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      />\n    </Snackbar>\n  )\n}\n","import * as React from 'react'\nimport { ChatErrors as ChatErrorsComponent } from '../components/ChatErrors'\nimport { useAppDispatch, useAppSelector } from '../../store'\nimport { dismissChatErrors } from '../chatSlice'\n\nexport const ChatErrors = () => {\n  const errors = useAppSelector((s) => s.chat.errors)\n\n  const dispatch = useAppDispatch()\n  const onDismissErrors = () => dispatch(dismissChatErrors())\n\n  return <ChatErrorsComponent errors={errors} onDismissErrors={onDismissErrors} />\n}\n","import { combineReducers, configureStore } from '@reduxjs/toolkit'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { themeReducer } from '../theme'\nimport { chatReducer } from '../chat'\n\nexport const reducer = combineReducers({\n  theme: themeReducer,\n  chat: chatReducer,\n})\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport const createStore = () =>\n  configureStore({\n    reducer,\n  })\n\nexport const store = createStore()\n\nexport type AppDispatch = typeof store.dispatch\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector = <T>(selector: (state: RootState) => T): T => useSelector<RootState, T>(selector)\n","import * as React from 'react'\nimport { ThemeSwitch as ThemeSwitchComponent } from '../components/ThemeSwitch'\nimport { toggleTheme } from '../index'\nimport { useAppDispatch, useAppSelector } from '../../store'\n\nexport const ThemeSwitch = () => {\n  const theme = useAppSelector((s) => s.theme)\n  const dispatch = useAppDispatch()\n  const onToggleTheme = () => dispatch(toggleTheme())\n  return <ThemeSwitchComponent theme={theme} onToggleTheme={onToggleTheme} />\n}\n","import { Theme, createTheme } from '@material-ui/core'\n\nexport const lightTheme: Theme = createTheme({\n  palette: {\n    type: 'light',\n  },\n})\n\nexport const darkTheme: Theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n})\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { ThemeSwitch } from '../../theme'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport { ChatErrors, ChatHistory, ChatInput } from '../../chat'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n  toolbar: {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto',\n    justifyItems: 'end',\n  },\n  main: {\n    display: 'grid',\n    height: '100vh',\n    width: '100vw',\n    gridTemplateRows: 'auto 1fr',\n    gridRowGap: 8,\n    paddingTop: 100,\n    paddingLeft: '20vw',\n    paddingRight: '20vw',\n  },\n})\n\nexport const App = () => {\n  const classes = useStyles()\n  return (\n    <div className=\"App\">\n      <AppBar>\n        <Toolbar className={classes.toolbar}>\n          <Typography>{`React You Do You – v${process.env.REACT_APP_VERSION}`}</Typography>\n          <ThemeSwitch />\n        </Toolbar>\n      </AppBar>\n      <div className={classes.main}>\n        <ChatInput />\n        <ChatHistory />\n      </div>\n      <ChatErrors />\n    </div>\n  )\n}\n","import { App as AppComponent } from '../components/App'\nimport * as React from 'react'\nimport { CssBaseline, MuiThemeProvider as ThemeProvider, Theme } from '@material-ui/core'\nimport { useAppSelector } from '../../store'\nimport { darkTheme, lightTheme } from '../../theme'\n\nexport const App = () => {\n  // This is the only place we need to access the theme via our own model\n  // From here on, it is safe and convenient to use the `useTheme` hook\n  const theme = useAppSelector<Theme>((s) => (s.theme === 'dark' ? darkTheme : lightTheme))\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppComponent />\n    </ThemeProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './app'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n"],"sourceRoot":""}